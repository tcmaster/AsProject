package com.android.tonight8.dao;

import java.util.List;
import java.util.ArrayList;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.VoteItem;

import com.android.tonight8.dao.entity.VoteItemOption;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table VOTE_ITEM_OPTION.
 */
public class VoteItemOptionDao extends AbstractDao<VoteItemOption, Long> {

    public static final String TABLENAME = "VOTE_ITEM_OPTION";
    private DaoSession daoSession;
    private String selectDeep;


    public VoteItemOptionDao(DaoConfig config) {
        super(config);
    }

    public VoteItemOptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'VOTE_ITEM_OPTION' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'VOTE_ITEM_ID' INTEGER," + // 1: voteItemId
                "'NAME' TEXT," + // 2: name
                "'OPTION_COUNT' INTEGER);"); // 3: optionCount
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VOTE_ITEM_OPTION'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, VoteItemOption entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        Long voteItemId = entity.getVoteItemId();
        if (voteItemId != null) {
            stmt.bindLong(2, voteItemId);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        Integer optionCount = entity.getOptionCount();
        if (optionCount != null) {
            stmt.bindLong(4, optionCount);
        }
    }

    @Override
    protected void attachEntity(VoteItemOption entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public VoteItemOption readEntity(Cursor cursor, int offset) {
        VoteItemOption entity = new VoteItemOption( //
                cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // voteItemId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // optionCount
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, VoteItemOption entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setVoteItemId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOptionCount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(VoteItemOption entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(VoteItemOption entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getVoteItemDao().getAllColumns());
            builder.append(" FROM VOTE_ITEM_OPTION T");
            builder.append(" LEFT JOIN VOTE_ITEM T0 ON T.'VOTE_ITEM_ID'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected VoteItemOption loadCurrentDeep(Cursor cursor, boolean lock) {
        VoteItemOption entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        VoteItem voteItem = loadCurrentOther(daoSession.getVoteItemDao(), cursor, offset);
        entity.setVoteItem(voteItem);

        return entity;
    }

    public VoteItemOption loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<VoteItemOption> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<VoteItemOption> list = new ArrayList<VoteItemOption>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<VoteItemOption> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<VoteItemOption> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity VoteItemOption.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property VoteItemId = new Property(1, Long.class, "voteItemId", false, "VOTE_ITEM_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property OptionCount = new Property(3, Integer.class, "optionCount", false, "OPTION_COUNT");
    }

}
