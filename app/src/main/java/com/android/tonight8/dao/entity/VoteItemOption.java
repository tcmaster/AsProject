package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;

import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.VoteItemDao;
import com.android.tonight8.dao.VoteItemOptionDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table VOTE_ITEM_OPTION.
 */
public class VoteItemOption {

    private long id;
    private Long voteItemId;
    private String name;
    private Integer optionCount;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient VoteItemOptionDao myDao;

    private VoteItem voteItem;
    private Long voteItem__resolvedKey;


    public VoteItemOption() {
    }

    public VoteItemOption(long id) {
        this.id = id;
    }

    public VoteItemOption(long id, Long voteItemId, String name, Integer optionCount) {
        this.id = id;
        this.voteItemId = voteItemId;
        this.name = name;
        this.optionCount = optionCount;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVoteItemOptionDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getVoteItemId() {
        return voteItemId;
    }

    public void setVoteItemId(Long voteItemId) {
        this.voteItemId = voteItemId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getOptionCount() {
        return optionCount;
    }

    public void setOptionCount(Integer optionCount) {
        this.optionCount = optionCount;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public VoteItem getVoteItem() {
        Long __key = this.voteItemId;
        if (voteItem__resolvedKey == null || !voteItem__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VoteItemDao targetDao = daoSession.getVoteItemDao();
            VoteItem voteItemNew = targetDao.load(__key);
            synchronized (this) {
                voteItem = voteItemNew;
                voteItem__resolvedKey = __key;
            }
        }
        return voteItem;
    }

    public void setVoteItem(VoteItem voteItem) {
        synchronized (this) {
            this.voteItem = voteItem;
            voteItemId = voteItem == null ? null : voteItem.getId();
            voteItem__resolvedKey = voteItemId;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
