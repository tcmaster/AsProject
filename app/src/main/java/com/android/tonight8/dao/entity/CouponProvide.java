package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.CouponProvideDao;
import com.android.tonight8.dao.EventDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COUPON_PROVIDE.
 */
public class CouponProvide {

    private long id;
    private Long eventId;
    private Integer type;
    private Float value;
    private Integer conditionNumber;
    private String content;
    private String dispatchContent;
    private Integer provideNumber;
    private Integer dispatchNumber;
    private Boolean provideAll;
    private Boolean isLiveUse;
    private String dateRangeStart;
    private String dateRangeEnd;
    private String templatePic;
    private String date;
    private String time;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CouponProvideDao myDao;

    private Event event;
    private Long event__resolvedKey;


    public CouponProvide() {
    }

    public CouponProvide(long id) {
        this.id = id;
    }

    public CouponProvide(long id, Long eventId, Integer type, Float value, Integer conditionNumber, String content, String dispatchContent, Integer provideNumber, Integer dispatchNumber, Boolean provideAll, Boolean isLiveUse, String dateRangeStart, String dateRangeEnd, String templatePic, String date, String time) {
        this.id = id;
        this.eventId = eventId;
        this.type = type;
        this.value = value;
        this.conditionNumber = conditionNumber;
        this.content = content;
        this.dispatchContent = dispatchContent;
        this.provideNumber = provideNumber;
        this.dispatchNumber = dispatchNumber;
        this.provideAll = provideAll;
        this.isLiveUse = isLiveUse;
        this.dateRangeStart = dateRangeStart;
        this.dateRangeEnd = dateRangeEnd;
        this.templatePic = templatePic;
        this.date = date;
        this.time = time;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCouponProvideDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getEventId() {
        return eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Float getValue() {
        return value;
    }

    public void setValue(Float value) {
        this.value = value;
    }

    public Integer getConditionNumber() {
        return conditionNumber;
    }

    public void setConditionNumber(Integer conditionNumber) {
        this.conditionNumber = conditionNumber;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getDispatchContent() {
        return dispatchContent;
    }

    public void setDispatchContent(String dispatchContent) {
        this.dispatchContent = dispatchContent;
    }

    public Integer getProvideNumber() {
        return provideNumber;
    }

    public void setProvideNumber(Integer provideNumber) {
        this.provideNumber = provideNumber;
    }

    public Integer getDispatchNumber() {
        return dispatchNumber;
    }

    public void setDispatchNumber(Integer dispatchNumber) {
        this.dispatchNumber = dispatchNumber;
    }

    public Boolean getProvideAll() {
        return provideAll;
    }

    public void setProvideAll(Boolean provideAll) {
        this.provideAll = provideAll;
    }

    public Boolean getIsLiveUse() {
        return isLiveUse;
    }

    public void setIsLiveUse(Boolean isLiveUse) {
        this.isLiveUse = isLiveUse;
    }

    public String getDateRangeStart() {
        return dateRangeStart;
    }

    public void setDateRangeStart(String dateRangeStart) {
        this.dateRangeStart = dateRangeStart;
    }

    public String getDateRangeEnd() {
        return dateRangeEnd;
    }

    public void setDateRangeEnd(String dateRangeEnd) {
        this.dateRangeEnd = dateRangeEnd;
    }

    public String getTemplatePic() {
        return templatePic;
    }

    public void setTemplatePic(String templatePic) {
        this.templatePic = templatePic;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    /** To-one relationship, resolved on first access. */
    public Event getEvent() {
        Long __key = this.eventId;
        if (event__resolvedKey == null || !event__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            Event eventNew = targetDao.load(__key);
            synchronized (this) {
                event = eventNew;
            	event__resolvedKey = __key;
            }
        }
        return event;
    }

    public void setEvent(Event event) {
        synchronized (this) {
            this.event = event;
            eventId = event == null ? null : event.getId();
            event__resolvedKey = eventId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
